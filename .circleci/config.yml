version: 2.1

commands:
  ci_steps:
    parameters:
      platform:
        type: string
    steps:
      - checkout
      - run:
          name: Pull Submodules
          command: git submodule update --init --recursive
      - run:
          name: Install prerequisites
          command: make setup
      - run:
          name: Build
          command: make build SHOW=1
      - run:
          name: Unit Test
          command: |
            mkdir -p ~/workspace/tests
            make unittests TEST_REPORT_DIR=$HOME/workspace/tests SHOW=1
      - run:
          name: Flow Test
          command: |
            mkdir -p ~/workspace/tests
            make test TEST_REPORT_DIR=$HOME/workspace/tests SHOW=1
      - run:
          name: Package
          command: |
            make pack BRANCH="${CIRCLE_BRANCH//[^A-Za-z0-9._-]/_}" INTO=$HOME/workspace/packages SHOW=1
      - persist_to_workspace:
          root: ~/workspace
          paths:
            - 'packages/release/*.zip'
            - 'packages/branch/*.zip'
      - store_test_results:
          path: ~/workspace/tests
  deploy:
    parameters:
      from:
        type: string
    steps:
      - run:
          name: Deploy to S3
          command: >-
            aws s3 cp <<parameters.from>>/ s3://redismodules/$PACKAGE_NAME/ --acl public-read --recursive --exclude "*" --include "*.zip"

jobs:
  lint:
    docker:
      - image: redislabsmodules/llvm-toolset:latest
    steps:
      - checkout
      - run:
          name: Checkout submodules
          command: git submodule update --init --recursive
      - run:
          name: lint
          command: |
            make setup
            make -C src lint

  build:
    docker:
      - image: redisfab/rmbuilder:6.0.1-x64-buster
    steps:
      - ci_steps:
          platform: debian

  build-macos:
    macos:
      xcode: 11.3.0
    steps:
      - run:
          name: Set up workspace
          command: |
            sudo mkdir -p ~/workspace
            sudo chown $USER ~/workspace
      - ci_steps:
          platform: macosx

  build-multiarch-docker:
    machine:
      enabled: true
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - run:
          name: Checkout submodules
          command: git submodule update --init --recursive
      - run:
          name: Setup Docker client experimental features
          command: |
            sudo ./deps/readies/bin/getdocker --just-enable-exp
            docker version
      - run:
          name: Build
          command: |
            sudo docker login -u redisfab -p $DOCKER_REDISFAB_PWD
            make -C build/docker build
            sudo make -C build/docker publish
          no_output_timeout: 20m

  coverage:
    docker:
      - image: redisfab/rmbuilder:6.0.1-x64-buster
    steps:
      - checkout
      - run:
          name: Pull Submodules
          command: git submodule update --init --recursive
      - run:
          name: Build & Test
          command: |
            make setup
            make build COV=1 SHOW=1
            make test COV=1
            bash <(curl -s https://codecov.io/bash) -f bin/linux-x64-debug-cov/cov.info
      - store_artifacts:
          path: coverage
          destination: coverage

  deploy_package:
    parameters:
      package:
        type: string
    docker:
      - image: redisfab/rmbuilder:6.0.1-x64-buster
    steps:
      - attach_workspace:
          at: ~/workspace
      - deploy:
          from: ~/workspace/packages/<<parameters.package>>
      - store_artifacts:
          path: ~/workspace/packages/<<parameters.package>>

  run_automation:
    parameters:
      module_version:
        type: string
    docker:
      - image: redisfab/rmbuilder:6.0.1-x64-buster
    steps:
      - checkout
      - run:
          name: Pull Submodules
          command: git submodule update --init --recursive
      - run:
          name: Setup
          command: |
            apt-get -qq update
            apt-get install -y ca-certificates curl jq
            python -m pip install jinja2
      - run:
          name: Run QA Automation
          command: MODULE_VERSION=<<parameters.module_version>> VERBOSE=1 ./tests/qa/run

on-any-branch: &on-any-branch
  filters:
    branches:
      only: /.*/
    tags:
      only: /.*/

never: &never
  filters:
    branches:
      ignore: /.*/
    tags:
      ignore: /.*/

on-master: &on-master
  filters:
    branches:
      only: master

on-version-tags: &on-version-tags
  filters:
    branches:
      ignore: /.*/
    tags:
      only: /^v[0-9].*/


workflows:
  version: 2
  build_and_package:
    jobs:
      - lint:
          <<: *on-any-branch
      - build:
          <<: *on-any-branch
      - build-macos:
          <<: *on-version-tags
      - build-multiarch-docker:
          <<: *on-version-tags
      - coverage:
          <<: *on-any-branch
      - deploy_package:
          name: deploy_branch
          package: branch
          requires:
            - build
          <<: *on-master
      - deploy_package:
          name: deploy_release
          package: release
          requires:
            - build
          <<: *on-version-tags
      - run_automation:
          module_version: $CIRCLE_BRANCH
          requires:
            - deploy_branch
      - run_automation:
          module_version: $CIRCLE_TAG
          requires:
            - deploy_release

  nightly:
    triggers:
      - schedule:
          cron: "20 17 * * *"
          <<: *on-master
    jobs:
      - build-macos
